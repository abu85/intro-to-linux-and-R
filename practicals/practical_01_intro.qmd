---
title: "Practical 01 — Intro to Linux and R"
---

# Goals

A) `Linux`: Learn basic Linux shell commands, practice, load tools.
B) `R`: Load packages, set working directories, Explore data in R.

## A. `Linux`: 

- open the terminal or wsl command line
- where am I (print working directory)
- list or view (different styles)
- create a directory (folder)
- change working directory to the new directory
- absolute/relative paths of that directory
- include options & arguments
- copy and paste files & folders
- move files & folders
- rename files & folders
- delete files or folders
- download any tools
- unzip or extract
- activate tool


### 1. Open Linux terminal at your PC

search `terminal` or `Ubuntu` or `command prompt` and click on the first result

### 2. List files
```bash
ls 
```

What else I can do with this command?
Options:
```bash
ls --help
```

```bash
man ls 
```
Note: press on **Q** keyboard button to **exit**

classify list (files or folders):
```bash
ls -F 
```

```bash
ls -F ./

```
Here `-F` is an *option* and `./` is an *argument* 
![](https://swcarpentry.github.io/shell-novice/fig/shell_command_syntax.svg)



list all:
```bash
ls -a
```

print the author of each file:
```bash
ls -la
```



### 3. Where am I?

What is my present working directory?

```bash
pwd
```


### 4. Create a folder/directory

Do it in home or current working directory

```bash
mkdir my_tools
```

multiple sub folders at once:
```bash
mkdir my_tools/plink
```
list them:
```bash
ls -a
```


### 5. Go in the new directory
```bash
cd my_tools
```
Or go to another sub directory
```bash
cd /plink
```


How do you know you moved in or not?

look at the texts before the `$` sign in the terminal

Or execute next command
```bash
pwd
```

Make a text file
```bash
touch test.txt
```

::: {.callout-tip title="To Do" collapse="false"}

What if you execute: 
`cd ..` or 
`cd -` or 
`cd --` 

What they do?

How to come back to the place(directory) where you were?

:::

### TO DO 1:

- Create a *folder* and a *sub-folder*
- make a file (*file.txt*) in 1st folder
- move it to the *sub-folder*
- print *content* of the sub-folder, see if *file.txt* is there
- rename the file to *file_v1.txt*


### 6. Software instalation in Linux 

**must for this workshops**

::: {.callout-tip title="tools installation in Linux" collapse="false"}

### Download the official Plink softwere binary and make it available

```bash
cd --               # be in your home directory

cd my_tools/plink   # be in your plink directory
```
We use `wget` command for this 
see all version [here](https://www.cog-genomics.org/plink/)

```bash
wget https://s3.amazonaws.com/plink1-assets/plink_linux_x86_64_20250819.zip
```

#### Unzip the downloaded file
use `unzip` command, 
```bash
unzip plink_linux_x86_64.zip
```
to know more `unzip --help`

#### Make the binary executable: change the permision
use `chmod` command
```bash
chmod +x plink
```
to know more `chmod --help`


#### Add Plink to your PATH 
(*optional but recommended*)
```bash
echo 'export PATH=$PATH:~/my_tools/plink' >> ~/.bashrc
source ~/.bashrc
```
this command ensures you can run it from anywhere in the terminal just by typing plink, without needing to specify the full path.

Explanation: 
- `echo` = print what is after it

- `>>` = is a shell operator used to append text to a file.

- `~`  = *home/username*

- `.bashrc` is a configuration file in your home directory that runs every time you start a new terminal session (specifically for Bash shell).


#### Test installation
check version of the Plink tool
```bash
plink --version
```
You will see something printed as like as bellow: 

>PLINK v1.9.0-b.7.11 64-bit (19 Aug 2025)


If not that means Plink is not activated, we need activate it (repeat and fix *Make the binary executable: change the permision* step)

:::

Well done!

### 7. create a file and write something in it


```bash
nano test.txt
```

copy and paste following line

`This is a file 
we like to read it
and save it`

`Ctrl` + `right click` mouse

>`Ctrl` + `o` for write out, then `Enter` to save the name, then `Ctrl` + `x` for exit




### TO DO 2 (extra)
- edit the new file and add the line 'Today is Monday' and exit the file or editing
- make it *executable*


### 8. Word count (extra)
Print file's content
```bash
cat file.txt
```

count line of the words
```bash
wc -l file.txt
```


#### print and pipe

```bash
cat file.txt | wc -l
```


### TO DO 3 (extra)

- see the couple of lines (use `head`) 
- count number of lines in a `file.text` file
- use | pipe
- save output to a file called `result.txt` (use `>`)


What you have learn so far:

::: {.callout-tip title="Linux commands" collapse="false"}

### Workshop oriented commands

`ls` ,`man`, `pwd`, `cd`, `mkdir`, `wget` (for plinks tool), `tar` or `unzip`, `nano`, `less`, `head`, `cp`, `mv`, `rm`, use of `\`, arguments.

### More commands

- `less` – view a file
- `nano` – view and edit a file
- `head` / `tail`
- `grep`
- `find`
- `wildcards`
- tab completion – use it!!!
- `man` – manual pages or
- anycommand `--help`
- `|`
:::


## B. `R`:

### 1. Packages needed for R modules

- `GAPIT3`
- `ggplot2`
- `rrBLUP`

::: {.callout-tip title="Packages installation" collapse="false"}
### GAPIT is a package that is run in the R software environment.
R can be freely downloaded from [http://www.r-project.org](http://www.r-project.org). 

We also recommend the integrated development environment RStudio which is also freely available at [http://www.rstudio.com](http://www.rstudio.com).


[GAPIT](https://github.com/jiabowang/GAPIT) can currently be installed in several ways.

- From source on the internet
- From GitHub
- From an archive


### Installation from source functions

GAPIT can be loaded with a single funciton. 


```r
source("http://zzlab.net/GAPIT/gapit_functions.txt")
```

Or from GitHub function.
```r
source("https://raw.githubusercontent.com/jiabowang/GAPIT/refs/heads/master/gapit_functions.txt", encoding = "UTF-8")
```

### Installation from GitHub

Installation can also be made from GitHub when the R package `devtools` is available.

```r
install.packages("devtools")
devtools::install_github("jiabowang/GAPIT", force=TRUE)
library(GAPIT)
```

or

```r
install.packages("remotes")
remotes::install_github("jiabowang/GAPIT")
library(GAPIT)
```

### Installation from an archive


GAPIT can be installed from an archive such as \*.tar.gz or \*.zip archive.
An archive can be downloaded from the "releases" page.
If you would like the latest version of GAPIT from the GitHub site you may want to clone it and then build it (this may require Rtools on Windows).

```bash
git clone git@github.com:jiabowang/GAPIT.git
R CMD build GAPIT
```

Once an archive has been obtained it can be installed from a shell, similar to as follows.


```bash
R CMD INSTALL GAPIT_3.5.0.9000.tar.gz
```

Or similarly from within R.

```
install.packages("GAPIT_3.5.0.9000.tar.gz", repos = NULL, type="source")
```

### In some case of the BiocManager can not be installed

Installation of same packages such as “multtest” and “biobase” can not be intalled from BiocManager directly. These packages can be downloaded in the Bioconductor website and be installed from local source files.

The website of Bioconductor is here:

```
https://bioconductor.org/packages/3.19/bioc/
```

More details please check and [ref user manual](https://github.com/jiabowang/GAPIT).

:::


### 2. Install **ggplot2** & **rrBLUP** packages
install packs
```r
install.packages("ggplot2")
install.packages("rrBLUP")
```
attach the packs
```r
library("ggplot2")
library("rrBLUP")
```


### 3. Setting a project or working directory

- to know where you are right now, run this `getwd()` function at R Console 

- to set directory at your target directory, run this `setwd()` function at R Console with target path (see example bellow)

example:
```r
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/path/to/your/folder")`
```
### 4. Interacting with R
Guided tour around the RStudio

### 5. How to import and export data or results

 - How to do that from RStudio? (guided tour)
 - How to do that with function or command?
 
 Load data table from a website to R 
```{r}
# loading data set
myY=read.table(file="https://github.com/jiabowang/GAPIT/raw/refs/heads/master/Documents/mdp_traits.txt", head = TRUE)
```

### 6. Data structures

Example R code to see the data structure:
```{r}
str(cars)
```
A data frame with 50 observations on 2 variables.

[,1]	speed	numeric	Speed (mph)
[,2]	dist	numeric	Stopping distance (ft)


### 7. Housekeeping

Comment, Quarto , R history

### 8. Saving plot


### 9. Plotting a figure (extra)
Speed and Stopping Distances of Cars
```{r}
# ggplot(data = cars, aes (x = speed, y = dist))+
# geom_point()
```

### 10. R built-in function  

- Directory: `setwd`, `getwd` 

- Upload data to R: `read.table`, `read_table`, `read_csv` 

- See data structure: `str`, `summarize`, `summary`. 

--------------- 

Well done! Congrats!!

END