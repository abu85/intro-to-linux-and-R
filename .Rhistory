# scale_y_continuous(expand = c(0,0))+
#theme(panel.margin = unit(0.3, "lines"))+
theme(axis.text.x=element_blank(),legend.position = "none",  strip.background = element_rect(fill = NA)) + xlab("")
d2 <- d2 + theme(legend.position = "bottom",legend.direction = 'horizontal', legend.byrow = T,
legend.box = 'horizontal')
# asv_count_condition <- subset(asv_count, metadata$condition)
# asv_count_condition <- asv_count_condition[!colSums(asv_count_condition)==0]
# dim(asv_count_condition)
alpha.asv_count_condition = fisher.alpha(asv_count )
shannon.asv_count_condition = diversity(asv_count)
specnumber.asv_count_condition <- specnumber(asv_count)
## Hill diversities
otuHill.asv_count = renyi(asv_count, scale=c(0,1,2,3), hill=T)
hill.0.asv_count = otuHill.asv_count$"0"
hill.1.asv_count = otuHill.asv_count$"1"
hill.2.asv_count = otuHill.asv_count$"2"
hill.3.asv_count = otuHill.asv_count$"3"
lm.alpha.location <-manyglm(alpha.asv_count ~ as.numeric(metadata$location))
lm_summary_alpha.location <- summary(lm.alpha.location)
aov_summary_alpha.location <- aov(lm.alpha.location)
aov_summary_alpha.location
# take coffficient
coef_df_alpha.location <- as.data.frame(lm_summary_alpha.location$coefficients)
#take p value from aov
p_values_alpha.location <- lm_summary_alpha.location$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_alpha.location <- summary(aov_summary_alpha.location)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_alpha.location <- sigma(aov_summary_alpha.location)
# cbind all but chose 2nd row
row_alpha.location <- as.data.frame(t(cbind(sum_squares_alpha.location,
residual_std_error_alpha.location,
p_values_alpha.location)[2,]))
row_alpha.location
lm.alpha.condition <-manyglm(alpha.asv_count ~ as.numeric(metadata$condition))
lm_summary_alpha.condition <- summary(lm.alpha.condition)
aov_summary_alpha.condition <- aov(lm.alpha.condition)
aov_summary_alpha.condition
# take coffficient
coef_df_alpha.condition <- as.data.frame(lm_summary_alpha.condition$coefficients)
#take p value from aov
p_values_alpha.condition <- lm_summary_alpha.condition$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_alpha.condition <- summary(aov_summary_alpha.condition)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_alpha.condition <- sigma(aov_summary_alpha.condition)
# cbind all but chose 2nd row
row_alpha.condition <- as.data.frame(t(cbind(sum_squares_alpha.condition,
residual_std_error_alpha.condition,
p_values_alpha.condition)[2,]))
row_alpha.condition
lm.shannon.location <-manyglm(shannon.asv_count ~ as.numeric(metadata$location))
lm_summary_shannon.location <- summary(lm.shannon.location)
aov_summary_shannon.location <- aov(lm.shannon.location)
aov_summary_shannon.location
# take coffficient
coef_df_shannon.location <- as.data.frame(lm_summary_shannon.location$coefficients)
#take p value from aov
p_values_shannon.location <- lm_summary_shannon.location$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_shannon.location <- summary(aov_summary_shannon.location)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_shannon.location <- sigma(aov_summary_shannon.location)
# cbind all but chose 2nd row
row_shannon.location <- as.data.frame(t(cbind(sum_squares_shannon.location,
residual_std_error_shannon.location,
p_values_shannon.location)[2,]))
row_shannon.location
lm.shannon.condition <-manyglm(shannon.asv_count ~ as.numeric(metadata$condition))
lm_summary_shannon.condition <- summary(lm.shannon.condition)
aov_summary_shannon.condition <- aov(lm.shannon.condition)
aov_summary_shannon.condition
# take coffficient
coef_df_shannon.condition <- as.data.frame(lm_summary_shannon.condition$coefficients)
#take p value from aov
p_values_shannon.condition <- lm_summary_shannon.condition$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_shannon.condition <- summary(aov_summary_shannon.condition)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_shannon.condition <- sigma(aov_summary_shannon.condition)
# cbind all but chose 2nd row
row_shannon.condition <- as.data.frame(t(cbind(sum_squares_shannon.condition,
residual_std_error_shannon.condition,
p_values_shannon.condition)[2,]))
row_shannon.condition
lm.hill.0.location <-manyglm(hill.0.asv_count ~ as.numeric(metadata$location))
lm_summary_hill.0.location <- summary(lm.hill.0.location)
aov_summary_hill.0.location <- aov(lm.hill.0.location)
aov_summary_hill.0.location
# take coffficient
coef_df_hill.0.location <- as.data.frame(lm_summary_hill.0.location$coefficients)
#take p value from aov
p_values_hill.0.location <- lm_summary_hill.0.location$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_hill.0.location <- summary(aov_summary_hill.0.location)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_hill.0.location <- sigma(aov_summary_hill.0.location)
# cbind all but chose 2nd row
row_hill.0.location <- as.data.frame(t(cbind(sum_squares_hill.0.location,
residual_std_error_hill.0.location,
p_values_hill.0.location)[2,]))
row_hill.0.location
lm.hill.0.condition <-manyglm(hill.0.asv_count ~ as.numeric(metadata$condition))
lm_summary_hill.0.condition <- summary(lm.hill.0.condition)
aov_summary_hill.0.condition <- aov(lm.hill.0.condition)
aov_summary_hill.0.condition
# take coffficient
coef_df_hill.0.condition <- as.data.frame(lm_summary_hill.0.condition$coefficients)
#take p value from aov
p_values_hill.0.condition <- lm_summary_hill.0.condition$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_hill.0.condition <- summary(aov_summary_hill.0.condition)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_hill.0.condition <- sigma(aov_summary_hill.0.condition)
# cbind all but chose 2nd row
row_hill.0.condition <- as.data.frame(t(cbind(sum_squares_hill.0.condition,
residual_std_error_hill.0.condition,
p_values_hill.0.condition)[2,]))
row_hill.0.condition
lm.hill.1.location <-manyglm(hill.1.asv_count ~ as.numeric(metadata$location))
lm_summary_hill.1.location <- summary(lm.hill.1.location)
aov_summary_hill.1.location <- aov(lm.hill.1.location)
aov_summary_hill.1.location
# take coffficient
coef_df_hill.1.location <- as.data.frame(lm_summary_hill.1.location$coefficients)
#take p value from aov
p_values_hill.1.location <- lm_summary_hill.1.location$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_hill.1.location <- summary(aov_summary_hill.1.location)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_hill.1.location <- sigma(aov_summary_hill.1.location)
# cbind all but chose 2nd row
row_hill.1.location <- as.data.frame(t(cbind(sum_squares_hill.1.location,
residual_std_error_hill.1.location,
p_values_hill.1.location)[2,]))
row_hill.1.location
lm.hill.1.condition <-manyglm(hill.1.asv_count ~ as.numeric(metadata$condition))
lm_summary_hill.1.condition <- summary(lm.hill.1.condition)
aov_summary_hill.1.condition <- aov(lm.hill.1.condition)
aov_summary_hill.1.condition
# take coffficient
coef_df_hill.1.condition <- as.data.frame(lm_summary_hill.1.condition$coefficients)
#take p value from aov
p_values_hill.1.condition <- lm_summary_hill.1.condition$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_hill.1.condition <- summary(aov_summary_hill.1.condition)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_hill.1.condition <- sigma(aov_summary_hill.1.condition)
# cbind all but chose 2nd row
row_hill.1.condition <- as.data.frame(t(cbind(sum_squares_hill.1.condition,
residual_std_error_hill.1.condition,
p_values_hill.1.condition)[2,]))
row_hill.1.condition
lm.hill.2.location <-manyglm(hill.2.asv_count ~ as.numeric(metadata$location))
lm_summary_hill.2.location <- summary(lm.hill.2.location)
aov_summary_hill.2.location <- aov(lm.hill.2.location)
aov_summary_hill.2.location
# take coffficient
coef_df_hill.2.location <- as.data.frame(lm_summary_hill.2.location$coefficients)
#take p value from aov
p_values_hill.2.location <- lm_summary_hill.2.location$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_hill.2.location <- summary(aov_summary_hill.2.location)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_hill.2.location <- sigma(aov_summary_hill.2.location)
# cbind all but chose 2nd row
row_hill.2.location <- as.data.frame(t(cbind(sum_squares_hill.2.location,
residual_std_error_hill.2.location,
p_values_hill.2.location)[2,]))
row_hill.2.location
lm.hill.2.condition <-manyglm(hill.2.asv_count ~ as.numeric(metadata$condition))
lm_summary_hill.2.condition <- summary(lm.hill.2.condition)
aov_summary_hill.2.condition <- aov(lm.hill.2.condition)
aov_summary_hill.2.condition
# take coffficient
coef_df_hill.2.condition <- as.data.frame(lm_summary_hill.2.condition$coefficients)
#take p value from aov
p_values_hill.2.condition <- lm_summary_hill.2.condition$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_hill.2.condition <- summary(aov_summary_hill.2.condition)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_hill.2.condition <- sigma(aov_summary_hill.2.condition)
# cbind all but chose 2nd row
row_hill.2.condition <- as.data.frame(t(cbind(sum_squares_hill.2.condition,
residual_std_error_hill.2.condition,
p_values_hill.2.condition)[2,]))
row_hill.2.condition
lm.hill.3.location <-manyglm(hill.3.asv_count ~ as.numeric(metadata$location))
lm_summary_hill.3.location <- summary(lm.hill.3.location)
aov_summary_hill.3.location <- aov(lm.hill.3.location)
aov_summary_hill.3.location
# take coffficient
coef_df_hill.3.location <- as.data.frame(lm_summary_hill.3.location$coefficients)
#take p value from aov
p_values_hill.3.location <- lm_summary_hill.3.location$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_hill.3.location <- summary(aov_summary_hill.3.location)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_hill.3.location <- sigma(aov_summary_hill.3.location)
# cbind all but chose 2nd row
row_hill.3.location <- as.data.frame(t(cbind(sum_squares_hill.3.location,
residual_std_error_hill.3.location,
p_values_hill.3.location)[2,]))
row_hill.3.location
lm.hill.3.condition <-manyglm(hill.3.asv_count ~ as.numeric(metadata$condition))
lm_summary_hill.3.condition <- summary(lm.hill.3.condition)
aov_summary_hill.3.condition <- aov(lm.hill.3.condition)
aov_summary_hill.3.condition
# take coffficient
coef_df_hill.3.condition <- as.data.frame(lm_summary_hill.3.condition$coefficients)
#take p value from aov
p_values_hill.3.condition <- lm_summary_hill.3.condition$coefficients[ ,"Pr(>wald)"]
#take sum of square
sum_squares_hill.3.condition <- summary(aov_summary_hill.3.condition)[[1]]$`Sum Sq`
# Extract Residual Standard Error
residual_std_error_hill.3.condition <- sigma(aov_summary_hill.3.condition)
# cbind all but chose 2nd row
row_hill.3.condition <- as.data.frame(t(cbind(sum_squares_hill.3.condition,
residual_std_error_hill.3.condition,
p_values_hill.3.condition)[2,]))
row_hill.3.condition
diversity_stat_summary_alpha <- as.data.frame(rbind(as.numeric(row_alpha.location),as.numeric(row_alpha.condition)))
diversity_stat_summary_shannon <- as.data.frame(rbind(as.numeric(row_shannon.location),as.numeric(row_shannon.condition)))
diversity_stat_summary_hill.0 <- as.data.frame(rbind(as.numeric(row_hill.0.location),as.numeric(row_hill.0.condition)))
diversity_stat_summary_hill.1 <- as.data.frame(rbind(as.numeric(row_hill.1.location),as.numeric(row_hill.1.condition)))
diversity_stat_summary_hill.2 <- as.data.frame(rbind(as.numeric(row_hill.2.location),as.numeric(row_hill.2.condition)))
diversity_stat_summary_hill.3 <- as.data.frame(rbind(as.numeric(row_hill.3.location),as.numeric(row_hill.3.condition)))
All_diversity_stats <- cbind(
diversity_stat_summary_alpha,
diversity_stat_summary_shannon,
diversity_stat_summary_hill.0,
diversity_stat_summary_hill.1,
diversity_stat_summary_hill.2,
diversity_stat_summary_hill.3)
All_diversity_stats <- format.data.frame(All_diversity_stats, format = "f", digits = 2)
# Create column names
col_names <- rep(c("SS", "RSE", "p-value"), 6)
# Create row names
row_names <- c("location", "condition")
colnames(All_diversity_stats
) <- col_names
rownames(All_diversity_stats
) <- row_names
All_diversity_stats
dist.all <- vegdist(asv_count)
# location
set.seed(12345)
adonis.location <- adonis2(dist.all ~ location, data = metadata, perm=9999)
adonis.location
# condition
set.seed(12345)
adonis.condition <- adonis2(dist.all ~ condition, data = metadata, perm=9999)
adonis.condition
# location+condition
set.seed(12345)
adonis.all <- adonis2(dist.all ~ location+condition, data = metadata, perm=9999)
adonis.all
dist.condition_d <- vegdist(asv_count)
set.seed(12345)
adonis.condition_d <- adonis2(dist.all~ location+condition , data = metadata, perm=9999, by = "terms")
adonis.condition_d
dist.condition_r <- vegdist(decostand(asv_count,"range"), "altGower")
set.seed(12345)
adonis.condition_r <- adonis2(dist.condition_r~ location+condition, data = metadata, perm=9999, by = "terms")
adonis.condition_r
dist.condition_br <- vegdist(decostand(asv_count,"range"), "bray")
set.seed(12345)
adonis.condition_br <- adonis2(dist.condition_br~ location + condition, data = metadata, perm=9999, by = "terms")
adonis.condition_br
dist.condition_z <- betadiver(asv_count, "z")
set.seed(12345)
adonis.condition_z <- adonis2(dist.condition_z~ location+condition, data = metadata, perm=9999, by = "terms")
adonis.condition_z
# calculate aplha
alpha.asv_count = fisher.alpha(asv_count)
all(rownames(metadata) == rownames(alpha.asv_count))
# What is the effect of the location on the alpha ?
model_alpha = lm(alpha.asv_count~metadata$location)
ANOVA_alpha=aov(model_alpha)
# Tukey test to study each pair of treatment :
tukey_alpha <- TukeyHSD(x=ANOVA_alpha, 'metadata$location', conf.level=0.95)
tukey_alpha
tukey_alpha_df <- as.data.frame(tukey_alpha$`metadata$location`)
tukey_alpha_df$p_adj <- ifelse(tukey_alpha_df$`p adj` < 0.05, "Sig.", "Not Sig.")
# substituting the GT from row names
row.names(tukey_alpha_df) <- as.character(row.names(tukey_alpha_df))
tukey_alpha_df
# Plotting
tu1 <- ggplot(tukey_alpha_df, aes(x = row.names(tukey_alpha_df), y = diff, ymin = lwr, ymax = upr, color = p_adj)) +
geom_point(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(stat = "identity", position = position_dodge(width = 0.8), width = 0.25, size = 1) +
geom_hline(yintercept = 0, linelocation = "dashed", color = "gray") +
labs(x = "", y = "") +
theme_classic() +
# theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5, size = 6),axis.text.y = element_text(size = 6)) +
theme(axis.text.x = element_text(angle =90, hjust = 1,vjust=0.5)) +
coord_flip()+
theme(legend.position = "none") +
scale_color_manual(values = c(black.transp, brown.transp))
tu1
## Tukey on shannon index
shannon.asv_count = diversity(asv_count)
all(rownames(metadata) == rownames(shannon.asv_count))
# What is the effect of the location on the shannon ?
model_shannon = lm(shannon.asv_count~metadata$location)
ANOVA_shannon=aov(model_shannon)
# Tukey test to study each pair of treatment :
tukey_shannon <- TukeyHSD(x=ANOVA_shannon, 'metadata$location', conf.level=0.95)
tukey_shannon
tukey_shannon_df <- as.data.frame(tukey_shannon$`metadata$location`)
tukey_shannon_df$p_adj <- ifelse(tukey_shannon_df$`p adj` < 0.05, "Sig.", "Not Sig.")
# substituting the GT from row names
# row.names(tukey_shannon_df) <- gsub("GT","",as.character(row.names(tukey_shannon_df)))
# tukey_shannon_df
row.names(tukey_shannon_df) <- as.character(row.names(tukey_shannon_df))
tukey_shannon_df
# Plotting
tu2 <- ggplot(tukey_shannon_df, aes(x = row.names(tukey_shannon_df), y = diff, ymin = lwr, ymax = upr, color = p_adj)) +
geom_point(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(stat = "identity", position = position_dodge(width = 0.8), width = 0.25, size = 1) +
geom_hline(yintercept = 0, linelocation = "dashed", color = "gray") +
labs(x = "", y = "") +
theme_classic() +
# theme(axis.text.x = element_text(angle =90, hjust = 1,vjust=0.5, size = 6),axis.text.y = element_text(size = 6)) +
theme(axis.text.x = element_text(angle =90, hjust = 1,vjust=0.5)) +
coord_flip()+
theme(legend.position = "none")+
scale_color_manual(values = c(black.transp, brown.transp))
tu3 <- tu2 +
scale_color_manual(labels = c("ns", "p < 0.05"),values = c(black.transp, brown.transp)) +
theme(legend.position = "bottom", legend.direction = 'vertical', legend.title = element_blank(),
legend.box = 'vertical')  # Adjust `nrow` as needed)
sessionInfo()
###
ggplot(metadata, aes(factor(condition,levels =c("empty", "filled")),alpha.asv_count,fill=location))+
geom_boxplot(outlier.size = 0.1)
geom_boxplot(outlier.size = 0.1)
ggplot(metadata, aes(factor(condition,levels =c("empty", "filled")),alpha.asv_count,fill=location))+
geom_boxplot(outlier.size = 0.1)
ggplot(metadata, aes(factor(condition,levels =c("empty", "filled")),alpha.asv_count))+
geom_boxplot(outlier.size = 0.1)
ggplot(metadata, aes(factor(condition),alpha.asv_count))+
geom_boxplot(outlier.size = 0.1)
ggplot(metadata, aes(condition),alpha.asv_count))+
ggplot(metadata, aes(condition,alpha.asv_count))+
geom_boxplot(outlier.size = 0.1)
View(metadata)
ggplot(metadata, aes(group,alpha.asv_count))+
geom_boxplot(outlier.size = 0.1)
ggplot(metadata, aes(factor(condition,shannon.asv_count))+
geom_boxplot(outlier.size = 0.1)
)
ggplot(metadata, aes(condition,shannon.asv_count))+
geom_boxplot(outlier.size = 0.1)
ggplot(metadata, aes(group,shannon.asv_count))+
geom_boxplot(outlier.size = 0.1)
usethis::git_sitrep()
library(usethis)
usethis::use_git()
usethis::use_github()
usethis::use_git()
usethis::proj_get()
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/GS_course/GS_course_2025/intro-to-R-genomic-selection")
quarto preview
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R")
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicals")
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R")
setwd("C:/Users/auue0001/quarto_website")
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R")
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R")
ls
```
man help
str(cars)
wd<-"C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/GS_course/website/intro-to-linux-and-R/practicalsexcercise/data/"
files<-list.files(wd)
files<-list.files(wd,pattern="csv")
files
getwd()
pine <-read.csv(wd,"data/Pine_provenance.csv")
pine <-read.csv(wd,"./Pine_provenance.csv")
wd<-"C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicalsexcercise/data/"
wd
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicals/excercise/")
pine <-read.csv(wd,"./Pine_provenance.csv")
pine <-read.csv("./Pine_provenance.csv")
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicals/excercise/")
pine <-read.csv("./data/Pine_provenance.csv")
head(pine)
tail(pine)
names(pine)
sapply(pine,mode)
sapply(pine,class)
str(pine)
boxplot(pine$height)
boxplot(split(pine$height, pine$prov),col=2)
plot(density(pine$height))
#base r plot
boxplot(split(pine$height, pine$prov),col=2)
dev.print (device=jpeg, file="C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicals/excercise/fig_1a.png", width=par("din")[1]*300, res=300, quality=100)
library(psych)
install.packages("psych")
# install.packages("psych")
library(psych)
# install.packages("psych")
library(psych)
# install.packages("psych")
library("psych")
# install.packages("psych")
library("psych")
# install.packages("psych")
library("psych")
library("writexl")
writexl::write_xlsx (sat.d2, path = "C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/GS_course/excercise/test_df.xlsx", col_names = TRUE, format_headers = TRUE)
rm(list = ls())
# install.packages("psych")
library("psych")
library("writexl")
wd<-"C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicalsexcercise/data/"
wd
files<-list.files(wd)
files<-list.files(wd,pattern="csv")
files
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicals/excercise/")
pine <-read.csv("./data/Pine_provenance.csv")
head(pine)
tail(pine)
names(pine)
sapply(pine,mode)
sapply(pine,class)
str(pine)
library(dplyr)
pine$female <- as.factor(pine$female)
pine$prov <- as.factor(pine$prov)
pine$block <- as.factor(pine$block)
str(pine)
unique(pine$female)
levels(pine$female)
table(pine$female)
# This table may be easier to read as a data frame:
fem.freq <-as.data.frame(table(pine$female))
names(fem.freq) <- c('female','counts')
fem.freq
plot(x = pine$volume, y = pine$height,
xlab = "Volume (cubic inches)", ylab = "Height (feet)",
main = " ", col = "blue")
library(psych)
d2 <- outlier(pine[,7:9], bad = 5, na.rm = TRUE)
sat.d2 <- data.frame(pine[,7:9], d2)
pairs.panels(sat.d2,bg=c("lightgreen","blue")[(d2 > 25)+1],pch=21)
stem(pine$height)
hist(pine$height, col='lightgreen')
plot(pine$height,pine$diameter, col='blue')
plot(density(pine$height))
plot(pine[,7:9] )
boxplot(pine$height)
boxplot(split(pine$height, pine$prov),col=2)
#base r plot
boxplot(split(pine$height, pine$prov),col=2)
dev.print (device=jpeg, file="C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicals/excercise/fig_1a.png", width=par("din")[1]*300, res=300, quality=100)
writexl::write_xlsx (sat.d2, path = "C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/GS_course/excercise/test_df.xlsx", col_names = TRUE, format_headers = TRUE)
rm(list = ls())
# install.packages("psych")
library("psych")
library("writexl")
wd<-"C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicalsexcercise/data/"
wd
files<-list.files(wd)
files<-list.files(wd,pattern="csv")
files
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicals/excercise/")
pine <-read.csv("./data/Pine_provenance.csv")
head(pine)
tail(pine)
names(pine)
sapply(pine,mode)
sapply(pine,class)
str(pine)
library(dplyr)
pine$female <- as.factor(pine$female)
pine$prov <- as.factor(pine$prov)
pine$block <- as.factor(pine$block)
str(pine)
unique(pine$female)
levels(pine$female)
table(pine$female)
# This table may be easier to read as a data frame:
fem.freq <-as.data.frame(table(pine$female))
names(fem.freq) <- c('female','counts')
fem.freq
plot(x = pine$volume, y = pine$height,
xlab = "Volume (cubic inches)", ylab = "Height (feet)",
main = " ", col = "blue")
library(psych)
d2 <- outlier(pine[,7:9], bad = 5, na.rm = TRUE)
sat.d2 <- data.frame(pine[,7:9], d2)
pairs.panels(sat.d2,bg=c("lightgreen","blue")[(d2 > 25)+1],pch=21)
stem(pine$height)
hist(pine$height, col='lightgreen')
plot(pine$height,pine$diameter, col='blue')
plot(density(pine$height))
plot(pine[,7:9] )
boxplot(pine$height)
boxplot(split(pine$height, pine$prov),col=2)
#base r plot
boxplot(split(pine$height, pine$prov),col=2)
dev.print (device=jpeg, file="C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R/practicals/excercise/fig_1a.png", width=par("din")[1]*300, res=300, quality=100)
# writexl::write_xlsx (sat.d2, path = "C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/GS_course/excercise/test_df.xlsx", col_names = TRUE, format_headers = TRUE)
#| echo: false
sessionInfo()
setwd("C:/Users/auue0001/OneDrive - Sveriges lantbruksuniversitet/slubi/proj/2025/GS_course/website/intro-to-linux-and-R")
getwd()
